

 0080 =         secsize		equ	128				;Size of sector in bytes
 0010 =         hmdsib		equ	2048/secsize	;Sectors in memory drive data block
 00FE =         hmddsm		equ	((512-4)*8)/hmdsib
 0080 =         mdriveh		equ	80h				;M-Drive/H
                
 0000           dph			org	0
 0000           			ds	2				;sector translate table vec
 0002           			ds	6				;scratch
 0008           			ds	2				;directory buffer
 000A           dph$dpb		ds	2				;DPB block vec
 000C           			ds	2				;checksum vec
 000E           			ds	2				;allocation vec
 000A =         o$dpbtbl	equ		dph$dpb-dph	;Offset to DPB in DPH
                
 0000           dpb			org	0
 0000           mdrive$type	ds	1				;mdrive type
 0001           			ds	1				;sectors per track
 0002           			ds	3				;bsh, blm, exm
 0005           			ds	2		;Reserved dir blocks, ents
 0007           			ds	2
 0009           			ds	2				;check sum vector
 000B           			ds	2				;# of reserved tracks for parity check
                
 0000 =         warm$boot	equ		0000h
 0005 =         bdos		equ		0005h
 0080 =         DMABUF		equ		0080h
                
                ;BIOS Offsets
 0000 =         CBOOT		equ		0000h
 0003 =         WBOOT		equ		cboot+03h
 0006 =         IOCONST		equ		cboot+06h
 0009 =         IOCONIN		equ		cboot+09h
 000C =         IOCONOUT	equ		cboot+0Ch
 000F =         IOLIST		equ		cboot+0fh
 0012 =         IOPUNCH		equ		cboot+12h
 0015 =         IOREADER	equ		cboot+15h
 0018 =         HOME		equ		cboot+18h
 001B =         SELDSK		equ		cboot+1Bh
 001E =         SETTRK		equ		cboot+1Eh
 0021 =         SETSEC		equ		cboot+21h
 0024 =         SETDMA		equ		cboot+24h
 0027 =         READ		equ		cboot+27h
 002A =         WRITE		equ		cboot+2Ah
 002D =         IOLISTST	equ		cboot+2Dh
                
 0100           	org	00100H
                ;
                begin:
 0100 312D04    	lxi		sp,STACK
 0103 218000    	lxi		h,DMABUF
 0106 E5        	push	h
 0107 4E        	mov		c,m			;C=byte count
 0108 0600      	mvi		b,0
 010A 23        	inx		h
 010B 09        	dad		b
 010C 3624      	mvi		m,'$'		;Mark END-OF-BUFFER
 010E E1        	pop		h
                scan:
 010F 23        	inx		h
 0110 0D        	dcr		c
 0111 FAF102    	jm		WHT$DRV		;No more args, report error
 0114 7E        	mov		a,m			;Fetch byte from buffer
 0115 FE20      	cpi		' '			;Skip blanks
 0117 CA0F01    	jz		scan
 011A FE24      	cpi		'$'			;End of buffer?
 011C CAF102    	jz		WHT$DRV		;Yes, report error
 011F D641      	sui		'A'			;Convert from ASCII to binary
 0121 FE10      	cpi		010H		;Too large?
 0123 D2EB02    	jnc		INV$DRV		;Yes, report error
 0126 32DF03    	sta		DRIVE		;Save as DRIVE
 0129 23        	inx		h			;Fetch next
 012A 7E        	mov		a,m			;Byte from buffer
 012B FE21      	cpi		'!'			;Force format flag?
 012D C4C802    	cnz		ASK$YES		;Nope, Ask for permission.
                						;Sets FMT$FLAG = -1 if permission="Y"
 0130 3ADF03    	lda		DRIVE		;Recover DRIVE
 0133 4F        	mov		c,a			;Into reg C
 0134 3E1B      	mvi		a,SELDSK
 0136 CDC302    	call	DO$BIOS		;BIOS
                						;Return HL=0 if invalid drive else HL=DPH
 0139 7C        	mov		a,h
 013A B5        	ora		l
 013B CAF702    	jz		NOT$MDRV	;Invalid DRIVE selected
 013E 010A00    	lxi		b,o$dpbtbl
 0141 09        	dad		b			;HL=ptr to DPB in DPH
 0142 7E        	mov		a,m
 0143 23        	inx		h
 0144 66        	mov		h,m
 0145 6F        	mov		l,a			;HL=ptr to DPB
 0146 2B        	dcx		h			;HL=ptr to mdrive$type
 0147 7E        	mov		a,m			;Fetch M-Drive type flag
 0148 FE80      	cpi		mdriveh		;Is this hardware M-Drive?
 014A DAF702    	jc		NOT$MDRV	;Nope
 014D E5        	push	h			;Save ptr to mdrive$type
 014E 3AEA02    	lda		FMT$FLAG
 0151 B7        	ora		a			;A= -1 if allowed to format drive
 0152 C29501    	jnz		FMT$MDRIVE	;Start unconditional drive format
 0155 C35B01    	jmp		CHK$MDRIVE	;Test if drive is formatted
                ;
                ; M-Drive formatted signature
                ;
                SIGNATURE:
 0158 4C        	db	04CH
 0159 4C        	db	04CH
 015A 4F        	db	04FH
 0003 =         SIG$LEN	equ	$-SIGNATURE
                ;
                ; Check if M-Drive is already formatted
                ;
                CHK$MDRIVE:
 015B 0E00      	mvi		c,000H		;BC=Sector number (0)
 015D 3E21      	mvi		a,SETSEC
 015F CDC302    	call	DO$BIOS		;BIOS
 0162 0E03      	mvi		c,003H		;BC=Track number (3)
 0164 3E1E      	mvi		a,SETTRK
 0166 CDC302    	call	DO$BIOS		;BIOS
 0169 218004    	lxi		h,DATA$BLK	;HL=Data block
 016C 22E803    	shld	DMA			;Store address of Data block
 016F 44        	mov		b,h
 0170 4D        	mov		c,l
 0171 3E24      	mvi		a,SETDMA	;BC=DMA buffer address
 0173 CDC302    	call	DO$BIOS		;BIOS
 0176 3E27      	mvi		a,READ		;Read sector
 0178 CDC302    	call	DO$BIOS		;BIOS
 017B 2AE803    	lhld	DMA			;HL=Start of Data block
 017E 017D00    	lxi	b,	secsize-SIG$LEN	;0007DH	;BC=Offset
 0181 09        	dad	b				;HL=Offset into data block
 0182 1E03      	mvi		e,SIG$LEN	;E=Length of SIG
 0184 015801    	lxi		b,SIGNATURE	;BC=Drive formatted SIG
                TEST$SIG:
 0187 0A        	ldax	b			;Fetch flag byte from SIG
 0188 BE        	cmp		m			;Match signature byte?
 0189 C29501    	jnz		FMT$MDRIVE	;Nope, Safe to format M-Drive
 018C 23        	inx		h			;Next byte in Data block
 018D 03        	inx		b			;Next byte in SIG
 018E 1D        	dcr		e			;Count bytes tested
 018F C28701    	jnz		TEST$SIG	;All done?
 0192 C3FD02    	jmp		FMT$MDRV	;Report M-Drive is formatted
                ;
                ; Begin formatting M-Drive
                ; by first reading track
                ;
                FMT$MDRIVE:
 0195 117903    	lxi		d,msg1
 0198 CDD103    	call	print
 019B E1        	pop		h			;Restore ptr to mdrive$type
 019C 23        	inx		h			;Now point to DPB: SPT
 019D 5E        	mov		e,m			;E=Low byte
 019E 23        	inx		h
 019F 56        	mov		d,m			;D=High byte
 01A0 EB        	xchg				;HL=SPT
 01A1 22E403    	shld	SPT			;Save Sectors Per Track
 01A4 EB        	xchg				;HL=DPB
 01A5 010600    	lxi		b,00006H	;BC=Offset to DPB:DSM
 01A8 09        	dad		b
 01A9 5E        	mov		e,m			;E=Low byte DPB:DSM
 01AA 23        	inx		h
 01AB 56        	mov		d,m			;D=High byte DPB:DSM
 01AC EB        	xchg				;HL=DSM, DE=ptr to DPB:DSM+1
 01AD 23        	inx		h			;HL=HL+1
 01AE 29        	dad		h			;*2
 01AF 29        	dad		h			;*4
 01B0 6C        	mov		l,h			;L=Value of H
 01B1 2600      	mvi		h,000H		;H=0
 01B3 29        	dad		h			;*2
 01B4 29        	dad		h			;*4
 01B5 29        	dad		h			;*8
 01B6 29        	dad		h			;*16
 01B7 22E003    	shld	CUR$DBLK	;Save Data block offset (# DIR entries)
 01BA EB        	xchg				;HL=DSM+1
 01BB 010500    	lxi		b,00005H	;BC=Offset to DPB:OFFSET
 01BE 09        	dad		b
 01BF 5E        	mov		e,m			;E=Low byte DPB:OFFSET
 01C0 23        	inx		h
 01C1 56        	mov		d,m			;D=High byte DPB:OFFSET
 01C2 EB        	xchg				;HL=DPB:OFFSET, DE=DPB:OFFSET+2
 01C3 22E603    	shld	OFFSET		;Save HL as offset
 01C6 EB        	xchg				;HL=DPB:OFFSET+2
 01C7 010000    	lxi		b,00000H	;BC=0 (Sector number)
 01CA 2AE003    	lhld	CUR$DBLK	;HL=Data block offset
 01CD 22E203    	shld	END$DBLK	;Save as Curent Data block
 01D0 218004    	lxi		h,DATA$BLK	;HL=00480H
 01D3 22E803    	shld	DMA			;Start of Data block
                L01D0:
 01D6 D5        	push	d			;Save Track number
 01D7 C5        	push	b			;Save Sector number
 01D8 4B        	mov		c,e
 01D9 42        	mov		b,d
 01DA 3E1E      	mvi		a,SETTRK	;BC=Track number
 01DC CDC302    	call	DO$BIOS		;BIOS
 01DF C1        	pop		b			;Restore Sector number
 01E0 C5        	push	b			;Save Sector number
 01E1 3E21      	mvi		a,SETSEC	;BC=Sector number
 01E3 CDC302    	call	DO$BIOS		;BIOS
 01E6 2AE803    	lhld	DMA			;HL=Start of Data block
 01E9 018000    	lxi		b,secsize	;Size of sector
 01EC 09        	dad		b			;HL=HL+secsize
 01ED 22E803    	shld	DMA			;Save as Data block
 01F0 44        	mov		b,h
 01F1 4D        	mov		c,l
 01F2 3E24      	mvi		a,SETDMA	;BC=DMA BUFFER
 01F4 CDC302    	call	DO$BIOS		;BIOS
 01F7 3E27      	mvi		a,READ		;READ sector
 01F9 CDC302    	call	DO$BIOS		;BIOS
 01FC C1        	pop		b			;Restore Sector number
 01FD D1        	pop		d			;Restore Track number
 01FE 03        	inx		b			;Next Sector
 01FF 2AE403    	lhld	SPT			;Get Sectors Per Track value
 0202 37        	stc					;Set carry flag=1
 0203 7D        	mov		a,l
 0204 99        	sbb		c
 0205 7C        	mov		a,h
 0206 98        	sbb		b			;Read Full Track?
 0207 D20E02    	jnc		L0208		;Nope, contine
 020A 010000    	lxi		b,00000H	;Clear Sector number
 020D 13        	inx		d			;Next Track
                L0208:
 020E 2AE203    	lhld	END$DBLK	;Curent Data block
 0211 2B        	dcx		h
 0212 22E203    	shld	END$DBLK	;Curent Data block
 0215 7C        	mov		a,h
 0216 B5        	ora		l			;All Data blocks done?
 0217 C2D601    	jnz		L01D0		;Nope, Continue
                ;
 021A 2AE003    	lhld	CUR$DBLK	;HL=Data block offset
 021D 29        	dad		h			;*2
 021E 29        	dad		h			;*4
 021F 44        	mov		b,h
 0220 4D        	mov		c,l			;BC=HL
 0221 21E004    	lxi		h,DATA$DIR	;004E0H	;HL=Start of Directory Area
 0224 112000    	lxi		d,32		;DE=Size of Directory Entry ;00020H
                L0221:
 0227 19        	dad		d
 0228 36E5      	mvi		m,0E5H		;Empty sector fill value
 022A 0B        	dcx		b
 022B 79        	mov		a,c
 022C B0        	ora		b			;BC=0?
 022D C22702    	jnz		L0221		;Nope
                ;
 0230 2AE603    	lhld	OFFSET
 0233 EB        	xchg
 0234 010000    	lxi		b,00000H	;BC=0
 0237 2AE003    	lhld	CUR$DBLK
 023A 22E203    	shld	END$DBLK
 023D 218004    	lxi		h,DATA$BLK	;00480H
 0240 22E803    	shld	DMA
                L023D:
 0243 D5        	push	d			;Save Track number
 0244 C5        	push	b			;Save Sector number
 0245 4B        	mov		c,e
 0246 42        	mov		b,d
 0247 3E1E      	mvi		a,SETTRK	;BC=Track number 01EH
 0249 CDC302    	call	DO$BIOS		;BIOS
 024C C1        	pop		b			;Restore Sector number
 024D C5        	push	b			;Save Sector number
 024E 3E21      	mvi		a,SETSEC	;BC=Sector number 021H
 0250 CDC302    	call	DO$BIOS		;BIOS
 0253 2AE803    	lhld	DMA
 0256 018000    	lxi		b,secsize	;Size of sector
 0259 09        	dad		b			;HL=HL+secsize
 025A 22E803    	shld	DMA
 025D 44        	mov		b,h
 025E 4D        	mov		c,l
 025F 3E24      	mvi		a,SETDMA	;BC=DMA buffer 024H
 0261 CDC302    	call	DO$BIOS
 0264 3E2A      	mvi		a,WRITE
 0266 CDC302    	call	DO$BIOS		;BIOS
 0269 C1        	pop		b			;Restore Sector number
 026A D1        	pop		d			;Restore Track number
 026B 03        	inx		b			;Next Sector
 026C 2AE403    	lhld	SPT			;Get Sectors Per Track value
 026F 37        	stc					;Set carry flag=1
 0270 7D        	mov		a,l
 0271 99        	sbb		c
 0272 7C        	mov		a,h
 0273 98        	sbb		b
 0274 D27B02    	jnc		L0275		;Write Full Track?
 0277 010000    	lxi		b,00000H	;Clear Sector number
 027A 13        	inx		d			;Next Track
                L0275:
 027B 2AE203    	lhld	END$DBLK
 027E 2B        	dcx		h
 027F 22E203    	shld	END$DBLK
 0282 7C        	mov		a,h
 0283 B5        	ora		l			;All blocks writen?
 0284 C24302    	jnz		L023D		;Nope, continue
                ;
                ; Write SIGNATURE block to mark M-Drive formatted
                ;
 0287 0E00      	mvi		c,000H		;Set Sector = 0
 0289 3E21      	mvi		a,SETSEC	;BC=Sector number 021H
 028B CDC302    	call	DO$BIOS		;BIOS
 028E 0E03      	mvi		c,003H		;Set Track = 3
 0290 3E1E      	mvi		a,SETTRK	;BC=Track number 01EH
 0292 CDC302    	call	DO$BIOS
 0295 218004    	lxi		h,DATA$BLK	;00480H
 0298 22E803    	shld	DMA
 029B 44        	mov		b,h
 029C 4D        	mov		c,l
 029D 3E24      	mvi		a,SETDMA	;BC=DMA buffer 024H
 029F CDC302    	call	DO$BIOS
 02A2 3E27      	mvi		a,READ
 02A4 CDC302    	call	DO$BIOS		;BIOS
 02A7 2AE803    	lhld	DMA
 02AA 017D00    	lxi		b,secsize-SIG$LEN	;0007DH
 02AD 09        	dad		b
 02AE 015801    	lxi		b,SIGNATURE
 02B1 1E03      	mvi		e,SIG$LEN
                SET$SIG:
 02B3 0A        	ldax	b
 02B4 77        	mov		m,a
 02B5 23        	inx		h
 02B6 03        	inx		b
 02B7 1D        	dcr		e
 02B8 C2B302    	jnz		SET$SIG
 02BB 3E2A      	mvi		a,WRITE
 02BD CDC302    	call	DO$BIOS
 02C0 C30303    	jmp		EXIT		;Format complete, exit program
                ;
                ; Entry: A=BIOS function
                ;
                DO$BIOS:
 02C3 2A0100    	lhld	warm$boot+1
 02C6 6F        	mov		l,a
 02C7 E9        	pchl			;INFO: index jump
                ;
                ; Ask user to enter "Y" on keyboard
                ; FMT$FLAG
                ;   0      User did NOT enter "Y"
                ;  255     User entered "Y"
                ;
                ASK$YES:
 02C8 119503    	lxi		d,msg2		;DE=Message
 02CB CDD103    	call	print		;Print message
                WAIT:
 02CE 0E06      	mvi		c,0006H		;BDOS function DIRECT$CONSOLE$I/O
 02D0 1EFF      	mvi		e,0ffH		;Input
 02D2 CD0500    	call	bdos		;A=0 No character
 02D5 E6DF      	ani		0DFH		;Force upper-case
 02D7 CACE02    	jz		WAIT
 02DA FE59      	cpi		'Y'			;Was it expected?
 02DC C20303    	jnz		EXIT		;No, exit program
 02DF 3EFF      	mvi		a,0FFH		;A=255
 02E1 32EA02    	sta		FMT$FLAG	;Set FMT$FLAG
 02E4 11CE03    	lxi		d,crlf
 02E7 C3D103    	jmp		print
                ;
                FMT$FLAG:
 02EA 00        	db	000H			;Default: 00
                ;
                ; Report Invalid Drive
                ;
                INV$DRV:
 02EB 110603    	lxi		d,err1		;DE=Message
 02EE C30003    	jmp		BAIL		;Print message and exit program
                ;
                ; Report No Drive on command line
                ;
                WHT$DRV:
 02F1 111603    	lxi		d,err2		;DE=Message
 02F4 C30003    	jmp		BAIL		;Print message and exit program
                ;
                ; Report No M-Drive support found
                ;
                NOT$MDRV:
 02F7 112B03    	lxi		d,err3		;DE=Message
 02FA C30003    	jmp		BAIL		;Print message and exit program
                ;
                ; Report M-Drive Formatted
                ;
                FMT$MDRV:
 02FD 115303    	lxi		d,err4		;DE=Message
                ;
                ; Print Message (DE), Fall into EXIT
                ;
                BAIL:
 0300 CDD103    	call	print
                ;
                ; Exit program
                ;
                EXIT:
 0303 C30000    	jmp		0000h		;BIOS: Warm Boot
                ;
                err1:
 0306 494E56414C	db	'INVALID DRIVE'
 0313 0D0A24    	db	0Dh,0Ah,'$'
                err2:
 0316 4E4F204452	db	'NO DRIVE SPECIFIED'
 0328 0D0A24    	db	0Dh,0Ah,'$'
                err3:
 032B 4452495645	db	'DRIVE SPECIFIED IS NOT A MEMORY DRIVE'
 0350 0D0A24    	db	0Dh,0Ah,'$'
                err4:
 0353 4D454D4F52	db	'MEMORY DRIVE IS ALREADY FORMATTED!!'
 0376 0D0A24    	db	0Dh,0Ah,'$'
                msg1:
 0379 0D0A      	db	0Dh,0Ah
 037B 464F524D41	db	'FORMATTING MEMORY DRIVE'
 0392 0A0D24    	db	0Ah,0Dh,'$'
                msg2:
 0395 434F4E4649	db	'CONFIRM DESTROY ALL FILES ON THE MEMORY DRIVE (Y or N)? '
 03CD 24        	db	'$'
                crlf:
 03CE 0D0A24    	db	0Dh,0Ah,'$'
                
                ;
                ; Print termenited message pointed by DE
                ;
                print:
 03D1 F5        	push	psw
 03D2 C5        	push	b
 03D3 D5        	push	d
 03D4 E5        	push	h
 03D5 0E09      	mvi		c,009H		;BDOS function PRINT$STRING
 03D7 CD0500    	call	bdos
 03DA E1        	pop		h
 03DB D1        	pop		d
 03DC C1        	pop		b
 03DD F1        	pop		psw
 03DE C9        	ret
                ;
                ; VARS
                ;
                DRIVE:
 03DF 00        	db	0
                CUR$DBLK:
 03E0 0000      	dw	0
                END$DBLK:
 03E2 0000      	dw	0
                SPT:
 03E4 0000      	dw	0
                OFFSET:
 03E6 0000      	dw	0
                DMA:
 03E8 0000      	dw	0
 042D           	org	0042DH
 042D =         STACK	equ	$
 0480           	org	00480H
 0480 =         DATA$BLK	equ	$
 04E0           	org	DATA$BLK + 60h
 04E0 =         DATA$DIR	equ	$
 04E0           	end
